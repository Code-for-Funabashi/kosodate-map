{"version":3,"sources":["components/Point.tsx","components/PointLayer.tsx","components/Map.tsx","components/Icons.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Point","props","Marker","position","point","lat","lng","icon","Popup","type","name","details","address","phone_number","loadFeatures","url","a","axios","get","res","data","pointCatalog","L","Icon","iconUrl","shadowUrl","iconSize","iconAnchor","popupAnchor","shadowSize","KosodateMap","MapContainer","center","zoom","tap","scrollWheelZoom","style","height","TileLayer","attribution","map","item","pointMeta","useState","features","setFeatures","useEffect","then","feature","PointLayer","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAIaA,EAAQ,SAACC,GAKpB,OACE,cAACC,EAAA,EAAD,CAAQC,SAAU,CAACF,EAAMG,MAAMC,IAAKJ,EAAMG,MAAME,KAAMC,KAAMN,EAAMM,KAAlE,SACE,eAACC,EAAA,EAAD,4BACOP,EAAMQ,KACX,uBAFF,iBAGOR,EAAMG,MAAMM,KACjB,uBAJF,iBAKOT,EAAMG,MAAMO,QAAQC,QACzB,uBANF,6BAOSX,EAAMG,MAAMO,QAAQE,mBCK7BC,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACDC,IAAMC,IAAiBH,GADtB,cACbI,EADa,yBAEZA,EAAIC,MAFQ,2CAAH,sD,gBChBZC,EAA4B,CAChC,CACEN,IACE,mJACFN,KAAM,qBACNF,KCVqB,IAAIe,IAAEC,KAAK,CAClCC,QACE,gGACFC,UACE,0EACFC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,IAClBC,WAAY,CAAC,GAAI,ODIjB,CACEd,IACE,4JACFN,KAAM,2BACNF,KCLoB,IAAIe,IAAEC,KAAK,CACjCC,QACE,+FACFC,UACE,0EACFC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,IAClBC,WAAY,CAAC,GAAI,QDEb1B,EAA6B,CAAC,UAAW,UAoBhC2B,EAlBK,WAClB,OACE,eAACC,EAAA,EAAD,CACEC,OAAQ7B,EACR8B,KAAM,GACNC,KAAK,EACLC,iBAAiB,EACjBC,MAAO,CAAEC,OAAQ,SALnB,UAOE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZxB,IAAI,uDAELM,EAAamB,KAAI,SAACC,GAAD,ODVE,SAACC,GAA0B,IAAD,EAClBC,mBAAsB,IADJ,mBAC3CC,EAD2C,KACjCC,EADiC,KAOlD,OAJAC,qBAAU,WACRhC,EAAa4B,EAAU3B,KAAKgC,MAAK,SAAC3B,GAAD,OAAUyB,EAAYzB,QACtD,CAACsB,IAEGE,EAASJ,KAAI,SAACQ,GAAD,OAClB,cAAC,EAAD,CACE5C,MAAO4C,EACPvC,KAAMiC,EAAUjC,KAChBF,KAAMmC,EAAUnC,MACXyC,EAAQtC,SCFeuC,CAAWR,UEjC9BS,EAHH,WACV,OAAO,cAAC,EAAD,KCWMC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5684e079.chunk.js","sourcesContent":["import type { Icon } from \"leaflet\";\nimport { Marker, Popup } from \"react-leaflet\";\nimport { PointInfo } from \"./PointLayer\";\n\nexport const Point = (props: {\n  point: PointInfo;\n  type: string;\n  icon: Icon;\n}) => {\n  return (\n    <Marker position={[props.point.lat, props.point.lng]} icon={props.icon}>\n      <Popup>\n        種別: {props.type}\n        <br />\n        名前: {props.point.name}\n        <br />\n        住所: {props.point.details.address}\n        <br />\n        電話番号: {props.point.details.phone_number}\n      </Popup>\n    </Marker>\n  );\n};\n","import axios from \"axios\";\nimport type { Icon } from \"leaflet\";\nimport { useState, useEffect } from \"react\";\nimport { Point } from \"./Point\";\n\nexport interface PointMeta {\n  url: string;\n  type: string;\n  icon: Icon;\n}\n\ninterface PointInfoDetail {\n  address?: string;\n  phone_number?: string;\n}\n\nexport interface PointInfo {\n  name: string;\n  lat: number;\n  lng: number;\n  details: PointInfoDetail;\n}\n\nconst loadFeatures = async (url: string) => {\n  const res = await axios.get<[PointInfo]>(url);\n  return res.data;\n};\n\nexport const PointLayer = (pointMeta: PointMeta) => {\n  const [features, setFeatures] = useState<PointInfo[]>([]);\n\n  useEffect(() => {\n    loadFeatures(pointMeta.url).then((data) => setFeatures(data));\n  }, [pointMeta]);\n\n  return features.map((feature) => (\n    <Point\n      point={feature}\n      type={pointMeta.type}\n      icon={pointMeta.icon}\n      key={feature.name}\n    />\n  ));\n};\n","import { MapContainer, TileLayer } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport { PointLayer, PointMeta } from \"./PointLayer\";\nimport { blueIcon, greenIcon } from \"./Icons\";\n\n// XXX: データがmainにマージされたらmainブランチを参照するようにする。\n// FIXME: 複数のtypeで位置情報が一致すると画面上わからなくなる。\nconst pointCatalog: PointMeta[] = [\n  {\n    url:\n      \"https://raw.githubusercontent.com/Code-for-Funabashi/Scrape-OpenData/kosodate-map/geodata/projects/kosodate-map/%E4%BF%9D%E8%82%B2%E5%9C%92.json\",\n    type: \"保育園\",\n    icon: greenIcon,\n  },\n  {\n    url:\n      \"https://raw.githubusercontent.com/Code-for-Funabashi/Scrape-OpenData/kosodate-map/geodata/projects/kosodate-map/%E4%B8%80%E6%99%82%E4%BF%9D%E8%82%B2.json\",\n    type: \"一時保育\",\n    icon: blueIcon,\n  },\n];\n\n//船橋市役所のlat lon\nconst position: [number, number] = [35.694722, 139.9825];\n\nconst KosodateMap = () => {\n  return (\n    <MapContainer\n      center={position}\n      zoom={13}\n      tap={false} // to support safari https://github.com/Leaflet/Leaflet/issues/7266\n      scrollWheelZoom={true}\n      style={{ height: \"100vh\" }}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {pointCatalog.map((item) => PointLayer(item))}\n    </MapContainer>\n  );\n};\n\nexport default KosodateMap;\n","import L from \"leaflet\";\n\nexport const greenIcon = new L.Icon({\n  iconUrl:\n    \"//raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png\",\n  shadowUrl:\n    \"//cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png\",\n  iconSize: [25, 41],\n  iconAnchor: [12, 41],\n  popupAnchor: [1, -34],\n  shadowSize: [41, 41],\n});\n\nexport const blueIcon = new L.Icon({\n  iconUrl:\n    \"//raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png\",\n  shadowUrl:\n    \"//cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png\",\n  iconSize: [25, 41],\n  iconAnchor: [12, 41],\n  popupAnchor: [1, -34],\n  shadowSize: [41, 41],\n});\n","import KosodateMap from \"./components/Map\";\n\nconst App = () => {\n  return <KosodateMap />;\n};\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}